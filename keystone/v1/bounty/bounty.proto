syntax = "proto3";

package keystone.v1.bounty;

import "google/protobuf/timestamp.proto";
import "keystone/v1/core/envelope.proto"; 
import "keystone/v1/core/content.proto";
import "keystone/v1/core/validation.proto";
import "google/protobuf/empty.proto";
import "a2a/a2a.proto";

option go_package = "keystone/v1/bounty;bountyv1";
option java_package = "com.keystone.v1.bounty";
option java_multiple_files = true;
option csharp_namespace = "Keystone.V1.Bounty";

// ============================================================================
// Service Definitions
// These represent the functions of the required smart contracts.
// ============================================================================

/**
 * @brief The BountyFactory is a singleton smart contract that allows agents
 * to create new bounties. It acts as the central registry and minting authority
 * for Bounty NFTs.
 */
service KeystoneBountyFactoryService {
  /**
   * @brief Creates a new bounty contract instance, mints a corresponding NFT
   * (e.g., ERC-721) representing the bounty, and funds the new contract.
   * @param request The parameters for the new bounty.
   * @return A response containing the addresses and IDs of the created assets.
   */
  rpc CreateBounty(KeystoneCreateBountyRequest) returns (KeystoneCreateBountyResponse);
}

/**
 * @brief The BountyContract is the specific contract instance that manages a single bounty.
 * It holds the reward funds, tracks submissions, and facilitates the award process.
 */
service KeystoneBountyContractService {
  /**
   * @brief Called by a Provider to submit a potential solution to the public submission pool.
   * This is the "Pool Push" mechanism. The contract records the submission
   * and makes it publicly visible.
   * @param request The details of the agent being submitted as a solution.
   * @return google.protobuf.Empty
   */
  rpc SubmitSolution(KeystoneSubmitSolutionRequest) returns (google.protobuf.Empty);

  /**
   * @brief Called by the bounty Issuer to select a winner from the submission pool.
   * This action transfers the bounty reward to the winning Provider and the
   * Bounty NFT to the Issuer as a verifiable record of completion.
   * @param request The details of the winning submission.
   * @return google.protobuf.Empty
   */
  rpc AwardBounty(KeystoneAwardBountyRequest) returns (google.protobuf.Empty);

  /**
   * @brief Called by the Issuer to reclaim funds if the deadline has passed
   * without a satisfactory solution being awarded.
   * @param request An empty message.
   * @return google.protobuf.Empty
   */
  rpc ReclaimBounty(KeystoneReclaimBountyRequest) returns (google.protobuf.Empty);
}

// ============================================================================
// Message Definitions
// These define the data structures used by the services and bounty metadata.
// ============================================================================

/**
 * @brief The data schema for the NFT representing a request for a new capability.
 * This metadata is stored on a decentralized storage layer (e.g., Arweave, IPFS)
 * and referenced by the Bounty NFT's tokenURI.
 */
message KeystoneBountyMetadata {
  // A URI uniquely identifying the capability that is needed.
  // Example: "https://schemas.postfiat.org/capabilities/defi-risk/compound-v3/v1"
  string required_capability_uri = 1;

  // The content hash of the Keystone Envelope that triggered this bounty.
  // This provides the full on-chain context for the work request.
  // Can be bytes32(0) if not triggered by a specific message.
  bytes triggering_context_hash = 2;

  // The deadline for submissions. After this time, the bounty may be closed.
  google.protobuf.Timestamp submission_deadline = 3;

  // A detailed, human-readable description of the task, requirements, and
  // acceptance criteria. Supports markdown.
  keystone.v1.core.KeystoneContentDescriptor description_descriptor = 4;

  // Metadata for how to interact with the bounty contract itself.
  // This allows any client to discover the on-chain components of this bounty.
  KeystoneBountyContractInfo contract_info = 5;

  // A map of machine-readable requirements for the bounty.
  map<string, string> requirements = 6;
  
  // Open-ended categories (e.g., "foundational", "exploratory", "research")
  repeated string categories = 7;
  
  // Identity attestations (e.g., "github:username", "eas:attestation_uid")
  map<string, string> identity_attestations = 8;
  
  // Expected deliverable type (e.g., "agent", "tool", "analysis")
  string deliverable_type = 9;
}

/**
 * @brief Contains the on-chain pointers for a specific bounty instance.
 */
message KeystoneBountyContractInfo {
  // The address of the specific BountyContract instance for this NFT.
  string contract_address = 1;

  // The EIP-155 chain ID where the contract is deployed.
  uint64 chain_id = 2;

  // The unique ID of the bounty NFT (e.g., ERC-721 tokenId).
  string token_id = 3;
}

/**
 * @brief Represents a single submission in the public submission pool of a BountyContract.
 */
message KeystoneSubmission {
  // A descriptor for the submitted solution.
  keystone.v1.core.KeystoneContentDescriptor solution_descriptor = 1;

  // The address of the Provider submitting the solution. This is who gets paid.
  string provider_address = 2;

  // Timestamp of the submission.
  google.protobuf.Timestamp submission_time = 3;

  // Optional message or link to documentation from the Provider.
  keystone.v1.core.KeystoneContentDescriptor comment_descriptor = 4;

  // The current status of this submission.
  // Valid states: SUBMITTED, WORKING, COMPLETED, FAILED, REJECTED
  a2a.v1.TaskState status = 5 [(keystone.v1.core.keystone_validate).numeric = {
    in: [1, 2, 3, 4, 7]  // Only these TaskState values are valid for bounties
  }];
}

// ----------------------------------------------------------------------------
// Request/Response Messages for RPCs
// ----------------------------------------------------------------------------

message KeystoneCreateBountyRequest {
  // A descriptor pointing to the BountyMetadata.
  keystone.v1.core.KeystoneContentDescriptor bounty_metadata_descriptor = 1;

  // The initial value of the bounty, in the smallest denomination of the currency
  // (e.g., wei for ETH). Must be a valid uint256 value.
  string reward_amount = 2 [(keystone.v1.core.keystone_validate) = {
    string: {
      pattern: "^[0-9]+$"
      min_len: 1
      max_len: 78  // Max uint256 has 78 digits
    }
    error_message: "reward_amount must be a valid uint256 string"
  }];

  // The address of the ERC-20 token for the reward.
  // Use the zero address (0x00...00) for the native chain currency (e.g., ETH).
  string reward_token_address = 3 [(keystone.v1.core.keystone_validate) = {
    string: {
      eth_address: true
    }
    error_message: "reward_token_address must be a valid Ethereum address"
  }];
}

message KeystoneCreateBountyResponse {
  // The address of the newly created BountyContract instance.
  string bounty_contract_address = 1;

  // The ID of the newly minted bounty NFT.
  string bounty_token_id = 2;
}

message KeystoneSubmitSolutionRequest {
  // A descriptor for the submitted solution.
  keystone.v1.core.KeystoneContentDescriptor solution_descriptor = 1;
  // An optional comment or link to documentation for this submission.
  keystone.v1.core.KeystoneContentDescriptor comment_descriptor = 2;
}

message KeystoneAwardBountyRequest {
  // The address of the winning Provider. This must match a provider
  // from an existing submission in the pool.
  string winning_provider_address = 1 [(keystone.v1.core.keystone_validate) = {
    string: {
      eth_address: true
    }
    required: true
    error_message: "winning_provider_address must be a valid Ethereum address"
  }];
}

message KeystoneReclaimBountyRequest {} // Empty message is sufficient.
